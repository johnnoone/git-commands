#!/usr/bin/env python

"""
    git truncate
    ~~~~~~~~~~~~

    Truncate master history to resfpec.


    Original script took from http://bit.ly/1DNWA6K
"""

import logging
import subprocess
try:
    from shlex import quote
except ImportError:
    from pipes import quote


class ProcessException(Exception):
    pass


def execute(command, *args):
    command = ' '.join([command] + list(args))
    logging.info("execute %s", command)
    msg, err = subprocess.Popen(command, shell=True,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE).communicate()
    if err:
        raise ProcessException(err)
    return msg


if __name__ == '__main__':
    import argparse
    import sys

    class Parser(argparse.ArgumentParser):
        def error(self, message):
            sys.stderr.write('error: %s\n' % message)
            self.print_help()
            sys.exit(2)

    parser = Parser(prog='git truncate',
                    description='Truncate history')
    parser.add_argument('refspec',
                        help='commit sha or tag')
    parser.add_argument('--message',
                        help='the commit message',
                        default='Truncated history')
    args = parser.parse_args()

    try:
        # check if refspec exists
        execute('git show %s' % quote(args.refspec))
    except ProcessException:
        parser.error('Refspec %r is not found. '
                     'Maybe you need to do a remote update first.')

    execute('git checkout --orphan temp %s' % quote(args.refspec))
    execute('git commit -m %s' % quote(args.message))
    execute('git rebase --onto temp %s master' % quote(args.refspec))
    execute('git branch -D temp')

    # The following 2 commands are optional,
    # they keep your git repo in good shape.

    # delete all the objects w/o references
    execute('git prune --progress')
    # aggressively collect garbage; may take a lot of time on large repos
    execute('git gc --aggressive')
