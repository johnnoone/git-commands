#!/usr/bin/env python

"""
    git cleanup
    ~~~~~~~~~~~

    Cleanup merged branches
"""

__all__ = ['remote']

import logging
import subprocess
import fnmatch
import re
from collections import defaultdict
from datetime import datetime, timedelta

KEEP_DEFAULTS = [
    'master',
    'prod',
    'preprod',
    'stage',
    'dev'
]


class ProcessException(Exception):
    pass


def execute(command, *args):
    command = ' '.join([command] + list(args))
    logging.debug("execute %s", command)

    msg, err = subprocess.Popen(command, shell=True,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE).communicate()
    if err:
        raise ProcessException(err)

    return msg


def remote(repository, master, keep, dry_run=None):
    if not dry_run:
        logging.debug('update local references')
        execute('git fetch', repository, ' --prune --quiet')

    logging.debug('compile keep')
    patterns = set([re.compile(fnmatch.translate(k)) for k in keep])

    def keepable(ref, branch):
        for pattern in patterns:
            if pattern.match(ref):
                logging.debug('%s matched by %r', ref, pattern.pattern)
                return True
            if pattern.match(branch):
                logging.debug('%s matched by %r', branch, pattern.pattern)
                return True
        return False

    logging.debug('clear remote references from %s', repository)
    for ref in execute('git branch -r --merged', master).splitlines():
        ref = ref.strip()
        repo, branch = ref.split('/', 1)
        if repo != repository or ' -> ' in ref:
            logging.debug('skip %s', ref)
            continue
        elif keepable(ref, branch):
            logging.info('keep %s', ref)
            continue
        else:
            logging.warn('delete %s', ref)
            if not dry_run:
                try:
                    execute('git push', repo, '--delete --quiet', branch)
                except ProcessException as error:
                    logging.error('%s cant be deleted: %s', ref, error.args[0])


def local_tags():
    for tag in execute('git tag -l').splitlines():
        yield tag


def remote_tags(repository):
    for line in execute('git ls-remote --tags', repository).splitlines():
        ref = line.split()[1]
        if ref.startswith('refs/tags/'):
            yield ref[10:]


def clean_local_tags(branchs, dry_run=None):
    if dry_run:
        def delete_local_tag(tag):
            return True
    else:
        def delete_local_tag(tag):
            execute('git tag -d', tag)

    patterns = []
    for branch in branchs:
        pattern = re.compile('(?P<branch>%s)-(?P<period>\d{8})' % re.escape(branch))
        patterns.append(pattern)

    period_a = datetime.now() - timedelta(days=30)
    period_b = datetime.now() - timedelta(days=90)

    buckets = defaultdict(set)
    unattended = set()
    for tag in local_tags():
        for pattern in patterns:
            matches = pattern.match(tag)
            if matches:
                period = datetime.strptime(matches.group('period'), '%Y%m%d')
                if period > period_a:
                    continue
                    logging.info('keep recent %s (local)', tag)
                elif period > period_b:
                    discr = period.strftime('%Y-%m week %W')
                    buckets[(matches.group('branch'), discr)].add(tag)
                else:
                    discr = period.strftime('%Y-%m')
                    buckets[(matches.group('branch'), discr)].add(tag)
                break
        else:
            unattended.add(tag)

    for bucket, tags in buckets.items():
        tags = sorted(tags, key=len)
        logging.info('keep %s (local)', tags.pop())
        for tag in tags:
            logging.info('delete %s (local)', tag)
            delete_local_tag(tag)

    for tag in unattended:
        logging.info('delete %s (local)', tag)
        delete_local_tag(tag)


def clean_remote_tags(repository, branchs, dry_run=None):
    if dry_run:
        def delete_remote_tag(tag, repository):
            return True
    else:
        def delete_remote_tag(tag, repository):
            execute('git push -q --delete', repository, tag)
            return True

    patterns = []
    for branch in branchs:
        pattern = re.compile('(?P<branch>%s)-(?P<period>\d{8})' % re.escape(branch))
        patterns.append(pattern)

    tags = set()
    for tag in remote_tags(repository):
        tags.add(tag)

    period_a = datetime.now() - timedelta(days=30)
    period_b = datetime.now() - timedelta(days=90)

    buckets = defaultdict(set)
    unattended = set()
    for tag in tags:
        for pattern in patterns:
            matches = pattern.match(tag)
            if matches:
                period = datetime.strptime(matches.group('period'), '%Y%m%d')
                if period > period_a:
                    print('keep recent %s' % tag)
                elif period > period_b:
                    discr = period.strftime('%Y-%m week %W')
                    buckets[(matches.group('branch'), discr)].add(tag)
                else:
                    discr = period.strftime('%Y-%m')
                    buckets[(matches.group('branch'), discr)].add(tag)
                break
        else:
            unattended.add(tag)

    for bucket, tags in buckets.items():
        tags = sorted(tags, key=len)
        logging.info('keep %s (remote)', tags.pop())
        for tag in tags:
            logging.info('delete %s (remote)', tag)
            delete_remote_tag(tag, repository)

    for tag in unattended:
        logging.info('delete %s (remote)', tag)
        delete_remote_tag(tag, repository)

    for tag in unattended:
        try:
            delete_remote_tag(tag, repository)
            logging.info('delete %s (remote)', tag)
        except ProcessException:
            logging.warn('cannot delete %s (remote)', tag)


def clean_unreleased_tags(repository, dry_run=None):
    if dry_run:
        def delete_local_tag(tag):
            return True
    else:
        def delete_local_tag(tag):
            execute('git tag -d', tag)

    local_t = set(local_tags())
    remote_t = set(remote_tags(repository))
    for tag in (local_t - remote_t):
        delete_local_tag(tag)
        logging.info('delete unreleased %s (local)', tag)


if __name__ == '__main__':
    import argparse
    import sys

    root = logging.getLogger()
    root.setLevel(logging.DEBUG)
    ch = logging.StreamHandler(sys.stdout)
    ch.setLevel(logging.INFO)
    root.addHandler(ch)

    parser = argparse.ArgumentParser(prog='git cleanup')
    parser.add_argument('--dry-run',
                        action='store_true',
                        help='do a dry run without deleting references')

    subparsers = parser.add_subparsers(description='configure the cleaning process',  # NOQA
                                       help='kind of cleaning')

    def parse_remote(args, parser):
        master = args.merged_into.format(**args.__dict__)
        keep = [keep.format(**args.__dict__) for keep in args.keep] + [master]
        remote(args.repository, master, keep, args.dry_run)

    parser_remote = subparsers.add_parser('remote',
                                          help='cleanup a remote repository')
    parser_remote.set_defaults(func=parse_remote)
    parser_remote.add_argument('repository',
                               nargs='?',
                               default='origin',
                               help='choose the remote repository. default to origin')  # NOQA
    parser_remote.add_argument('--merged-into', '-m',
                               default='{repository}/master',
                               help='use this branch as reference. default to master')  # NOQA
    parser_remote.add_argument('--keep', '--k', action="append",
                               default=list(KEEP_DEFAULTS),
                               help='keep these references untouched')

    def parse_tags(args, parser):
        branchs = set(args.keep + ["master"])

        clean_local_tags(branchs, args.dry_run)
        clean_remote_tags(args.repository, branchs, args.dry_run)
        clean_unreleased_tags(args.repository, args.dry_run)

    parser_tags = subparsers.add_parser('tags',
                                        help='cleanup local and remote tags')
    parser_tags.set_defaults(func=parse_tags)
    parser_tags.add_argument('repository',
                             nargs='?',
                             default='origin',
                             help='choose the remote repository. default to origin')  # NOQA
    parser_tags.add_argument('--keep', '--k', action="append",
                             default=list(KEEP_DEFAULTS),
                             help='keep these references untouched')

    args = parser.parse_args()
    args.func(args, parser)
